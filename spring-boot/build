
# When I create docker files, I like to stage everything in a dist directory and then
# Add the dist directory into image using the ADD dockerfile directive.  I find this
# easier to do since you need to escape the RUN directive within the Dockerfile and
# the logic looks rather frankly fugly. 
# 
# Here is what the complete dockerfile looks like:
# 
#	 FROM rhel7-jdk:latest
# 
#	 WORKDIR /opt/springboot/
# 
#	 ADD dist/ /opt/springboot/
# 
#	 RUN chmod ugo+x springboot.sh
# 
#	 CMD /opt/springboot/springboot.sh
# 
# also note that when I run my docker files I mount a volume that the script file
# below sources - /scripts/environment.  This way we can pass environment variables
# into the running docker image instead of passing them via the command line
# that is we are running a script file that is on the host filesystem from within
# the docker image
mkdir dist

# copy the spring boot project to the distribution folder
cp ~/code/spring-boot-sample/build/libs/spring-boot-docker-0.1.0.jar dist/

# dynamically create a script file in the distribution folder.
# this will be the command used in the docker file
cat << EOF > dist/springboot.sh
#!/bin/bash

if [ -f /scripts/environment ]; then
	echo "found environment file from scripts folder on host"
	echo "injecting environment into container"
   source /scripts/environment
fi

java -jar spring-boot-docker-0.1.0.jar
EOF

# now that we have staged everything, build the docker image
docker build -t gs-spring-boot .
# now clean up everything that we are done
rm -fr dist
